name: AI Pair Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review (optional)'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for proper diff analysis

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-python-3.13-venv-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-3.13-venv-

    - name: Install dependencies
      run: |
        make venv

    - name: Get changed files
      id: changed-files
      run: |
        # Get list of changed files in PR
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        else
          # For manual workflow dispatch
          git diff --name-only HEAD~1...HEAD > changed_files.txt
        fi
        
        # Filter for Python files and other relevant files
        grep -E '\.(py|md|yml|yaml|json)$' changed_files.txt > relevant_files.txt || true
        
        echo "Changed files:"
        cat relevant_files.txt || echo "No relevant files changed"
        
        # Set output for later steps
        echo "has_changes=$([ -s relevant_files.txt ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

    - name: Run AI Code Review
      if: steps.changed-files.outputs.has_changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AI_PROVIDER: ${{ secrets.AI_PROVIDER || 'fake' }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        NO_NETWORK: ${{ secrets.AI_PROVIDER && '0' || '1' }}
      run: |
        # Create review directory with changed files
        mkdir -p temp_review/milestone-pr
        
        # Copy changed files to review directory
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            mkdir -p "temp_review/milestone-pr/$(dirname "$file")"
            cp "$file" "temp_review/milestone-pr/$file"
          fi
        done < relevant_files.txt
        
        # Add context files if they exist
        for context_file in README.md requirements.txt setup.py pyproject.toml; do
          if [ -f "$context_file" ]; then
            cp "$context_file" "temp_review/milestone-pr/" 2>/dev/null || true
          fi
        done
        
        # Run reviewer agent
        source .venv/bin/activate
        python -m src.agents.review.reviewer_agent temp_review/milestone-pr
        
        # Save review status for later steps
        REVIEW_STATUS=$(python scripts/check_review_status.py temp_review/milestone-pr/review-report.md)
        echo "review_status=$REVIEW_STATUS" >> $GITHUB_ENV
        echo "Review Status: $REVIEW_STATUS"

    - name: Post review to PR
      if: steps.changed-files.outputs.has_changes == 'true' && github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source .venv/bin/activate
        
        # Post review comments to PR
        if [ -f "temp_review/milestone-pr/review-report.md" ]; then
          python scripts/post_review_to_pr.py temp_review/milestone-pr/review-report.md || echo "Failed to post review comments"
        fi

    - name: Create check run
      if: steps.changed-files.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const status = '${{ env.review_status }}';
          const conclusion = status === 'pass' ? 'success' : (status === 'fail' ? 'failure' : 'neutral');
          
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'AI Code Review',
            head_sha: context.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: `AI Review: ${status.toUpperCase()}`,
              summary: `The AI code review ${status === 'pass' ? 'passed' : 'found issues that need attention'}.`,
              text: 'See PR comments for detailed feedback.'
            }
          });

    - name: Upload review report
      if: steps.changed-files.outputs.has_changes == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: review-report
        path: temp_review/milestone-pr/review-report.md
        retention-days: 7

    - name: Comment on PR with summary
      if: steps.changed-files.outputs.has_changes == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const status = '${{ env.review_status }}';
          
          let statusEmoji = '‚ùì';
          let statusText = 'Unknown';
          if (status === 'pass') {
            statusEmoji = '‚úÖ';
            statusText = 'PASSED';
          } else if (status === 'fail') {
            statusEmoji = '‚ùå';
            statusText = 'FAILED';
          }
          
          const comment = `## ${statusEmoji} AI Code Review Status: ${statusText}
          
          The AI Pair Reviewer has completed its analysis of this PR.
          
          ${status === 'pass' ? 
            '‚ú® **Great job!** The code meets quality standards.' : 
            '‚ö†Ô∏è **Issues found.** Please address the review comments below.'}
          
          [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          <sub>ü§ñ Powered by SoloPilot AI Review System</sub>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: ai-review
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies for coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run tests with coverage
      env:
        NO_NETWORK: 1
        AI_PROVIDER: fake
      run: |
        python -m pytest --cov=src.agents --cov=src.utils --cov=src.common --cov=src.providers --cov-report=xml --cov-report=term-missing

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check Quality Gate
      if: github.event_name == 'pull_request'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Wait for SonarCloud analysis to complete
        sleep 10
        
        # Check quality gate status (this is a placeholder - actual implementation would use SonarCloud API)
        echo "Quality Gate check would happen here"
        echo "sonar_status=pass" >> $GITHUB_ENV

  review-status:
    name: Review Status Check
    runs-on: ubuntu-latest
    needs: [ai-review, sonarcloud]
    if: always()
    
    steps:
    - name: Determine overall status
      run: |
        # This job serves as a required status check for PR merge
        # It will fail if either AI review or SonarCloud fails
        
        AI_RESULT="${{ needs.ai-review.result }}"
        SONAR_RESULT="${{ needs.sonarcloud.result }}"
        
        echo "AI Review Result: $AI_RESULT"
        echo "SonarCloud Result: $SONAR_RESULT"
        
        if [ "$AI_RESULT" = "success" ] && [ "$SONAR_RESULT" = "success" ]; then
          echo "‚úÖ All quality checks passed!"
          exit 0
        else
          echo "‚ùå Quality checks failed!"
          exit 1
        fi