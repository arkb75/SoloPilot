name: Deploy to Vercel

on:
  push:
    branches:
      - production
      - 'client/**'  # Client-specific branches
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      client_name:
        description: 'Client name (for client deployments)'
        required: false
        type: string
      project_type:
        description: 'Project type (site, app, api)'
        required: false
        default: 'site'
        type: choice
        options:
          - site
          - app
          - api

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Determine if this is a client deployment
  determine-deployment-type:
    name: Determine Deployment Type
    runs-on: ubuntu-latest
    outputs:
      is_client: ${{ steps.check.outputs.is_client }}
      client_name: ${{ steps.check.outputs.client_name }}
      project_type: ${{ steps.check.outputs.project_type }}
    steps:
      - name: Check deployment type
        id: check
        run: |
          # Check if branch is client-specific
          if [[ "${{ github.ref }}" == refs/heads/client/* ]]; then
            echo "is_client=true" >> $GITHUB_OUTPUT
            # Extract client name from branch
            CLIENT_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/client/||' | sed 's|-| |g')
            echo "client_name=$CLIENT_NAME" >> $GITHUB_OUTPUT
            echo "project_type=site" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.client_name }}" ]]; then
            echo "is_client=true" >> $GITHUB_OUTPUT
            echo "client_name=${{ github.event.inputs.client_name }}" >> $GITHUB_OUTPUT
            echo "project_type=${{ github.event.inputs.project_type || 'site' }}" >> $GITHUB_OUTPUT
          else
            echo "is_client=false" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    name: Build and Deploy to Vercel
    needs: determine-deployment-type
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv click

      - name: Validate environment
        run: |
          echo "Deployment target: ${{ github.event.inputs.environment || 'production' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: Build project
        run: |
          # Check if Next.js project exists
          if [ -f "package.json" ] && grep -q "next" package.json; then
            echo "Building Next.js project..."
            npm ci
            npm run build
          else
            echo "No Next.js project found, proceeding with Python deployment"
          fi

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEPLOYMENT_ENV: ${{ github.event.inputs.environment || 'production' }}
          IS_CLIENT: ${{ needs.determine-deployment-type.outputs.is_client }}
          CLIENT_NAME: ${{ needs.determine-deployment-type.outputs.client_name }}
          PROJECT_TYPE: ${{ needs.determine-deployment-type.outputs.project_type }}
        run: |
          # Build deployment command
          DEPLOY_CMD="python scripts/deploy_to_vercel.py"
          DEPLOY_CMD+=" --token \"$VERCEL_TOKEN\""
          
          # Handle client vs SoloPilot deployments
          if [[ "$IS_CLIENT" == "true" ]]; then
            echo "üè¢ Deploying client project: $CLIENT_NAME"
            DEPLOY_CMD+=" --create-project"
            DEPLOY_CMD+=" --client-name \"$CLIENT_NAME\""
            DEPLOY_CMD+=" --project-type \"$PROJECT_TYPE\""
          else
            echo "üöÄ Deploying SoloPilot main project"
            DEPLOY_CMD+=" --project-id \"$VERCEL_PROJECT_ID\""
            if [[ -n "$VERCEL_ORG_ID" ]]; then
              DEPLOY_CMD+=" --org-id \"$VERCEL_ORG_ID\""
            fi
          fi
          
          DEPLOY_CMD+=" --environment \"$DEPLOYMENT_ENV\""
          DEPLOY_CMD+=" --branch \"${{ github.ref_name }}\""
          DEPLOY_CMD+=" --commit \"${{ github.sha }}\""
          
          echo "Running: $DEPLOY_CMD"
          eval $DEPLOY_CMD

      - name: Run smoke tests
        id: smoke_tests
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment_url }}
        run: |
          echo "Running smoke tests against: $DEPLOYMENT_URL"
          
          # Basic health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL")
          if [ "$response" != "200" ]; then
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi
          echo "‚úÖ Health check passed"
          
          # Check SSL certificate
          if [[ "$DEPLOYMENT_URL" == https://* ]]; then
            if curl -sI "$DEPLOYMENT_URL" 2>&1 | grep -q "SSL certificate problem"; then
              echo "‚ùå SSL certificate check failed"
              exit 1
            fi
            echo "‚úÖ SSL certificate is valid"
          fi
          
          # Check critical endpoints (if API exists)
          if curl -s "$DEPLOYMENT_URL/api/health" | grep -q "ok"; then
            echo "‚úÖ API health endpoint responding"
          fi

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment_url = '${{ steps.deploy.outputs.deployment_url }}';
            const project_id = '${{ steps.deploy.outputs.project_id }}';
            const status = '${{ job.status }}';
            const is_client = '${{ needs.determine-deployment-type.outputs.is_client }}';
            const client_name = '${{ needs.determine-deployment-type.outputs.client_name }}';
            
            // Create deployment status
            const description = is_client === 'true' 
              ? `Client deployment ${status}: ${client_name}`
              : `Deployment ${status}`;
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status === 'success' ? 'success' : 'failure',
              target_url: deployment_url,
              description: description,
              environment: '${{ github.event.inputs.environment || 'production' }}'
            });
            
            // Add comment with deployment details for client projects
            if (is_client === 'true' && status === 'success' && context.issue?.number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ Client deployment successful!\n\n**Client:** ${client_name}\n**Project ID:** ${project_id}\n**URL:** ${deployment_url}\n\n[View deployment](${deployment_url})`
              });
            }

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå Deployment to Vercel failed!\n\nCommit: ${context.sha}\nBranch: ${context.ref}\n\n[View logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

  post-deployment-validation:
    name: Post-Deployment Validation
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 pytest pytest-timeout

      - name: Run integration tests
        env:
          DEPLOYMENT_URL: ${{ needs.build-and-deploy.outputs.deployment_url }}
        run: |
          # Run comprehensive post-deployment tests
          if [ -f "tests/integration/test_deployment.py" ]; then
            pytest tests/integration/test_deployment.py \
              --deployment-url="$DEPLOYMENT_URL" \
              --timeout=300 \
              -v
          else
            echo "No integration tests found, skipping..."
          fi

      - name: Performance check
        env:
          DEPLOYMENT_URL: ${{ needs.build-and-deploy.outputs.deployment_url }}
        run: |
          # Basic performance metrics
          echo "Checking page load time..."
          load_time=$(curl -o /dev/null -s -w '%{time_total}' "$DEPLOYMENT_URL")
          echo "Page load time: ${load_time}s"
          
          # Alert if load time exceeds threshold
          if (( $(echo "$load_time > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: Page load time exceeds 3 seconds"
          fi

      - name: Security headers check
        env:
          DEPLOYMENT_URL: ${{ needs.build-and-deploy.outputs.deployment_url }}
        run: |
          echo "Checking security headers..."
          headers=$(curl -sI "$DEPLOYMENT_URL")
          
          # Check for essential security headers
          security_headers=(
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
          )
          
          for header in "${security_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "‚úÖ $header is present"
            else
              echo "‚ö†Ô∏è Missing security header: $header"
            fi
          done