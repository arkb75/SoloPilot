name: CI

on:
  push:
    branches: [ main, feature/*, chore/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-venv-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-venv-

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: Set up virtual environment and install dependencies
      run: |
        make venv

    - name: Run tests
      env:
        AWS_ACCESS_KEY_ID: dummy
        AWS_SECRET_ACCESS_KEY: dummy
        BEDROCK_IP_ARN: arn:aws:bedrock:us-east-2:111111111111:inference-profile/dummy
        NO_NETWORK: 1
        AI_PROVIDER: fake
      run: |
        source .venv/bin/activate
        pytest -q

    - name: Run linting and formatting checks
      run: |
        source .venv/bin/activate
        pip install ruff black isort
        echo "Running ruff checks..."
        ruff check . || echo "Ruff checks completed with warnings"
        echo "Running black formatting check..."
        black --check . || echo "Black formatting check completed"
        echo "Running isort check..."
        isort --check-only . --profile=black || echo "isort check completed"
    
    - name: Run performance benchmarks
      env:
        AI_PROVIDER: fake
        NO_NETWORK: 1
      run: |
        source .venv/bin/activate
        echo "Running performance benchmark suite..."
        python tests/performance/benchmark_suite.py || echo "Performance benchmarks completed"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ubuntu-latest-python-3.13-venv-${{ hashFiles('requirements.txt') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: Set up virtual environment
      run: |
        make venv

    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        if [ -n "$AWS_ACCESS_KEY_ID" ]; then
          echo "AWS credentials configured"
        else
          echo "AWS credentials not available - integration tests will use fallbacks"
        fi

    - name: Test Bedrock connectivity
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      timeout-minutes: 5
      run: |
        source .venv/bin/activate
        echo "Testing direct Bedrock connectivity..."
        if [ -n "$AWS_ACCESS_KEY_ID" ]; then
          python -m pytest scripts/test_bedrock_direct.py -v --tb=short || echo "Bedrock connectivity test failed - may be due to credentials or permissions"
        else
          echo "Skipping Bedrock test - no AWS credentials configured"
        fi

    - name: Run complex project validation (offline)
      env:
        AI_PROVIDER: fake
        NO_NETWORK: 1
      timeout-minutes: 15
      run: |
        source .venv/bin/activate
        echo "Running complex project validation with fake provider..."
        python scripts/validate_complex_projects.py || echo "Complex project validation completed (offline mode)"
    
    - name: Run integration test (full pipeline with real LLM)
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      timeout-minutes: 20
      run: |
        source .venv/bin/activate
        echo "Running full pipeline integration test..."
        if [ -n "$AWS_ACCESS_KEY_ID" ]; then
          python -m pytest tests/test_integration_pipeline.py::TestIntegrationPipeline::test_full_pipeline_integration -v --tb=short || echo "Full pipeline test failed - may be due to credentials or LLM limits"
        else
          echo "Running fallback integration test without real LLM calls..."
          AI_PROVIDER=fake make plan-dev || echo "Integration test completed with fallbacks"
        fi

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: |
          analysis/output/
          analysis/planning/
          output/dev/
          logs/
        retention-days: 7

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies for coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run tests with coverage
      env:
        NO_NETWORK: 1
        AI_PROVIDER: fake
      run: |
        python -m pytest --cov=src --cov-report=xml --cov-report=term-missing

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  code-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    needs: [test, sonarcloud]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run AI Code Review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AI_PROVIDER: fake  # Use fake provider in CI for consistency
        NO_NETWORK: 1
      run: |
        # Create a temporary milestone directory for review
        mkdir -p temp_review/milestone-test
        cp -r src/ temp_review/milestone-test/
        
        # Run reviewer agent
        python -m src.agents.review.reviewer_agent temp_review/milestone-test
        
        # Post review to PR if GitHub token is available
        if [ -n "$GITHUB_TOKEN" ] && [ "$NO_NETWORK" != "1" ]; then
          python scripts/post_review_to_pr.py temp_review/milestone-test/review-report.md
        else
          echo "Skipping GitHub review posting (offline mode or no token)"
          cat temp_review/milestone-test/review-report.md
        fi

  promote:
    name: Promote to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, sonarcloud, code-review]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for merge

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run AI Code Review for Promotion
      env:
        AI_PROVIDER: fake  # Use fake provider for CI consistency
        NO_NETWORK: 1
      run: |
        # Create milestone directory with latest code
        mkdir -p promotion_review/milestone-main
        cp -r src/ promotion_review/milestone-main/
        cp -r scripts/ promotion_review/milestone-main/ || true
        
        # Run review
        python -m src.agents.review.reviewer_agent promotion_review/milestone-main
        
        # Check review status
        echo "REVIEW_STATUS=$(python scripts/check_review_status.py promotion_review/milestone-main/review-report.md)" >> $GITHUB_ENV

    - name: Fast-forward merge to staging
      if: env.REVIEW_STATUS == 'pass'
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Check if staging branch exists
        if git show-ref --verify --quiet refs/remotes/origin/staging; then
          echo "Staging branch exists, checking out..."
          git checkout staging
          git merge --ff-only main
        else
          echo "Creating new staging branch..."
          git checkout -b staging
        fi
        
        # Push to staging (skip in forks or if no push access)
        if [ "$GITHUB_REPOSITORY" != "your-username/SoloPilot" ] || [ "${{ github.event.repository.fork }}" = "true" ]; then
          echo "Skipping push to staging (fork or insufficient permissions)"
        else
          git push origin staging || echo "Failed to push to staging - may be due to permissions"
        fi

    - name: Create promotion summary
      if: always()
      run: |
        echo "## 🚀 Promotion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Review Status**: ${{ env.REVIEW_STATUS || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.REVIEW_STATUS }}" = "pass" ]; then
          echo "✅ **Result**: Code promoted to staging branch" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Result**: Promotion blocked due to review failures" >> $GITHUB_STEP_SUMMARY
        fi