[tool.poetry]
name = "solopilot"
version = "1.0.0"
description = "Transform freelance development by automating everything except client relationships"
authors = ["SoloPilot Team"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/arkb75/SoloPilot"
keywords = ["freelance", "automation", "ai", "development"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [
    { include = "src" }
]

[tool.poetry.dependencies]
python = "^3.9"
# LangChain for LLM orchestration
langchain = ">=0.3.25,<1.0.0"
langchain-community = "0.3.24"
langchain-core = ">=0.3.55,<1.0.0"
langchain-aws = "0.2.24"

# AWS integration
boto3 = ">=1.34.120"
botocore = ">=1.34.120"

# OCR and image processing
pytesseract = ">=0.3.10"
Pillow = ">=10.0.0"

# Vector search and storage
chromadb = ">=0.4.15,<1.0.0"
faiss-cpu = { version = ">=1.11.0", markers = "sys_platform != 'darwin'" }
scikit-learn = { version = "1.5.2", markers = "sys_platform == 'darwin'" }

# Configuration and utilities
python-dotenv = "1.0.1"
PyYAML = "6.0.2"
requests = "2.32.3"
pydantic = ">=2.10.0,<3.0.0"

# Document parsing
python-docx = "1.1.2"

# Email handling
beautifulsoup4 = "^4.12.0"
psutil = "^5.9.0"

# Web framework (for frontend API)
click = "^8.1.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "8.3.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.21.0"

# Code quality
black = "24.8.0"
isort = "^5.13.0"
flake8 = "7.1.1"
mypy = "^1.8.0"
ruff = "^0.1.0"

# Type stubs
types-requests = "^2.31.0"
types-PyYAML = "^6.0.0"
boto3-stubs = {extras = ["bedrock", "bedrock-runtime", "s3", "dynamodb", "ses", "sqs", "lambda"], version = "^1.34.0"}

# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"

# Development utilities
ipython = "^8.18.0"
ipdb = "^0.13.0"

[tool.poetry.scripts]
solopilot = "src.agents.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | output
  | analysis
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/output/*", "*/analysis/*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "output",
    "analysis",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/output/*",
    "*/analysis/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 60

[tool.coverage.html]
directory = "htmlcov"
