#!/usr/bin/env python3
"""
Git-push storage layer for SoloPilot artifacts.
Commits and pushes dev agent outputs to a remote git repository.
"""

import argparse
import json
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional


def run_command(
    cmd: list, cwd: Optional[Path] = None, check: bool = True
) -> subprocess.CompletedProcess:
    """Run a subprocess command with error handling."""
    try:
        result = subprocess.run(cmd, cwd=cwd, capture_output=True, text=True, check=check)
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Command failed: {' '.join(cmd)}", file=sys.stderr)
        print(f"   Error: {e.stderr.strip()}", file=sys.stderr)
        raise
    except FileNotFoundError:
        print(f"‚ùå Command not found: {cmd[0]}", file=sys.stderr)
        raise


def validate_git_url(git_url: str) -> bool:
    """Validate that the git URL is properly formatted."""
    if not git_url:
        return False

    # Check for valid Git URL patterns
    valid_patterns = [
        # HTTPS URLs
        git_url.startswith("https://")
        and (".git" in git_url or "github.com" in git_url or "gitlab.com" in git_url),
        # SSH URLs
        git_url.startswith("git@"),
        git_url.startswith("ssh://git@"),
        # File URLs
        git_url.startswith("file://"),
        # Local bare repository paths (absolute paths ending with .git)
        (git_url.startswith("/") and git_url.endswith(".git")),
        # Relative bare repository paths ending with .git (but not other protocols)
        (
            not git_url.startswith(("http", "git@", "ssh://", "file://", "ftp://"))
            and git_url.endswith(".git")
        ),
    ]

    return any(valid_patterns)


def setup_git_repo(src_path: Path, git_url: str, timestamp: str) -> Dict[str, str]:
    """
    Initialize git repo, commit artifacts, and push to remote.
    Returns dict with branch URL and metadata.
    """
    if not src_path.exists():
        raise FileNotFoundError(f"Source path does not exist: {src_path}")

    if not validate_git_url(git_url):
        raise ValueError(
            f"Invalid git URL format: {git_url}\n"
            f"Hint: use file:///abs/path/repo.git or git@host:org/repo.git\n"
            f"Valid formats: https://github.com/user/repo.git, git@github.com:user/repo.git, "
            f"file:///path/to/repo.git, /path/to/bare.git"
        )

    # Initialize git repository
    print(f"üìÅ Initializing git repository in {src_path}")
    run_command(["git", "init"], cwd=src_path)

    # Configure git (use environment or defaults)
    git_user_name = os.getenv("GIT_USER_NAME", "SoloPilot Bot")
    git_user_email = os.getenv("GIT_USER_EMAIL", "bot@solopilot.dev")

    run_command(["git", "config", "user.name", git_user_name], cwd=src_path)
    run_command(["git", "config", "user.email", git_user_email], cwd=src_path)

    # Add all files
    print("üì¶ Adding artifacts to git...")
    run_command(["git", "add", "."], cwd=src_path)

    # Check if there are any changes to commit
    status_result = run_command(["git", "status", "--porcelain"], cwd=src_path)
    if not status_result.stdout.strip():
        raise RuntimeError("No changes to commit in the source directory")

    # Create commit
    commit_message = f"Add SoloPilot artifacts from {timestamp}\n\nGenerated by SoloPilot dev agent\nTimestamp: {timestamp}"
    print("üíæ Creating commit...")
    run_command(["git", "commit", "-m", commit_message], cwd=src_path)

    # Create and switch to artifact branch
    branch_name = f"artifact/{timestamp}"
    print(f"üåø Creating branch: {branch_name}")
    run_command(["git", "checkout", "-b", branch_name], cwd=src_path)

    # Add remote
    print(f"üîó Adding remote: {git_url}")
    run_command(["git", "remote", "add", "origin", git_url], cwd=src_path)

    # Push to remote
    print("‚¨ÜÔ∏è Pushing to remote...")
    try:
        run_command(["git", "push", "-u", "origin", branch_name], cwd=src_path)
    except subprocess.CalledProcessError as e:
        # If push fails, provide helpful error message
        if "Permission denied" in e.stderr or "Authentication failed" in e.stderr:
            raise RuntimeError(
                f"Git push failed due to authentication. Please check your credentials for {git_url}"
            )
        elif "Repository not found" in e.stderr:
            raise RuntimeError(f"Git repository not found. Please check the URL: {git_url}")
        else:
            raise RuntimeError(f"Git push failed: {e.stderr.strip()}")

    # Get commit hash
    commit_result = run_command(["git", "rev-parse", "HEAD"], cwd=src_path)
    commit_hash = commit_result.stdout.strip()

    # Construct branch URL (basic heuristic for common Git hosting)
    if "github.com" in git_url:
        repo_path = git_url.replace("https://github.com/", "").replace(".git", "")
        branch_url = f"https://github.com/{repo_path}/tree/{branch_name}"
    elif "gitlab.com" in git_url:
        repo_path = git_url.replace("https://gitlab.com/", "").replace(".git", "")
        branch_url = f"https://gitlab.com/{repo_path}/-/tree/{branch_name}"
    else:
        # Generic URL
        branch_url = f"{git_url}/tree/{branch_name}"

    return {
        "branch_name": branch_name,
        "branch_url": branch_url,
        "commit_hash": commit_hash,
        "remote_url": git_url,
        "timestamp": timestamp,
        "status": "pushed",
    }


def main():
    """Main entry point for the push artifacts script."""
    parser = argparse.ArgumentParser(
        description="Push SoloPilot dev artifacts to a git repository",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python scripts/push_artifacts.py --src output/dev/20250611_123456 --remote https://github.com/user/solopilot-artifacts.git
  python scripts/push_artifacts.py --src output/dev/20250611_123456 --remote git@github.com:user/artifacts.git
  python scripts/push_artifacts.py --src output/dev/20250611_123456 --remote file:///tmp/bare.git
  python scripts/push_artifacts.py --src output/dev/20250611_123456 --remote /tmp/bare.git
        """,
    )

    parser.add_argument(
        "--src",
        type=str,
        required=True,
        help="Source directory containing artifacts (e.g., output/dev/20250611_123456)",
    )

    parser.add_argument("--remote", type=str, required=True, help="Git remote URL to push to")

    parser.add_argument(
        "--dry-run", action="store_true", help="Show what would be done without actually pushing"
    )

    args = parser.parse_args()

    # Resolve source path
    src_path = Path(args.src).resolve()

    # Extract timestamp from directory name
    timestamp = src_path.name
    if not timestamp.replace("_", "").replace("-", "").isdigit():
        # Fallback to current timestamp if directory name isn't a timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    try:
        if args.dry_run:
            print("üß™ DRY RUN MODE")
            print(f"   Source: {src_path}")
            print(f"   Remote: {args.remote}")
            print(f"   Branch: artifact/{timestamp}")
            print("   Would initialize git, commit files, and push to remote")

            # Output what the JSON response would be
            result = {
                "branch_name": f"artifact/{timestamp}",
                "branch_url": f"{args.remote}/tree/artifact/{timestamp}",
                "commit_hash": "dry-run-hash",
                "remote_url": args.remote,
                "timestamp": timestamp,
                "status": "dry-run",
            }
        else:
            result = setup_git_repo(src_path, args.remote, timestamp)

        # Output JSON result to stdout
        print(json.dumps(result, indent=2))

    except Exception as e:
        error_result = {
            "status": "error",
            "error": str(e),
            "timestamp": timestamp,
            "remote_url": args.remote,
        }
        print(json.dumps(error_result, indent=2), file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
